@use '../utils/bem.scss' as * with (
  $block: button
);
@use '../common/var' as *;
@use '../utils/button.scss' as button;

// hover button mixin
@mixin buttonHover() {
  &:hover {
    &:not(:disabled) {
      @content;
    }
  }
}

// active button mixin
@mixin buttonActive() {
  &:active {
    &:not(:disabled) {
      @content;
    }
  }
}

// button ripple mixin
@mixin buttonRipple() {
  @include e('ripple') {
    @content;
  }
}

@mixin buttonCircle($size) {
  max-width: $size;
  height: $size;
  border-radius: calc($size / 2);
  padding: 0;
}

// button theme mixin
@mixin themeMixin($color, $isCustom: false) {
  background-color: $color;
  color: getFillColor();
  @include buttonHover() {
    @if $isCustom {
      background-color: $color;
      opacity: 0.7;
    } @else {
      background-color: rgba($color: $color, $alpha: 0.7);
    }
  }
  @include buttonActive() {
    transform: scale(0.96);
  }
  @include buttonRipple() {
    @if $isCustom {
      background-color: rgba(#000, 0.1);
    } @else {
      background-color: rgba($color: $color, $alpha: 0.9);
    }
  }

  &#{m(plain)} {
    font-weight: 700;
    color: $color;
    background-color: transparent;
    border-color: $color;
    @include buttonHover() {
      background-color: getFillColor('light');
      border-color: transparent;
    }
    @include buttonActive() {
      color: getFillColor();
      // background-color: transparent;
    }
    @include buttonRipple() {
      @if $isCustom {
        background-color: $color;
      }
    }
  }
}

@include b() {
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border: none;
  outline: none;
  cursor: pointer;
  user-select: none;
  vertical-align: middle;
  border-radius: getBorderRadius('small');
  font-weight: normal;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  transition: all getTransition();
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  @include button.size();
  @include themeMixin(getTextColor());
  &#{m('circle')} {
    @include buttonCircle(button.getSize());
  }
}

// button type
$buttonType: primary success warning danger;
@each $type in $buttonType {
  @include m($type) {
    @include themeMixin(getColor($type));
  }
}

// button size
@each $s in button.$size {
  @include m($s) {
    @include button.size($s);
    &#{m('circle')} {
      @include buttonCircle(button.getSize($s));
    }
  }
}

// custom color
@include is(color) {
  $color: var(--color);
  @include themeMixin($color, true);
}

// disabled
@include is(disabled) {
  cursor: not-allowed;
  opacity: getOpacity('disabled');
}

// loading
@include is(loading) {
  opacity: getOpacity('loading');
}

// shape: round
@include m(round) {
  border-radius: getBorderRadius(larger);
}

// block
@include is(block) {
  width: 100%;
}

// ripple
@include buttonRipple() {
  position: absolute;
  border-radius: 50%;
  transform: scale(0);
  z-index: -1;
}
@include is('active', e('ripple')) {
  animation: ripple 0.6s linear forwards;
}
@keyframes ripple {
  to {
    transform: scale(4);
  }
}
