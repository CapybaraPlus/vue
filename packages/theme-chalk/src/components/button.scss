@use '../utils/bem.scss' as * with (
  $block: button
);
@use '../common/var' as *;
@use 'sass:map';

// hover button mixin
@mixin buttonHover() {
  &:hover {
    &:not(:disabled) {
      @content;
    }
  }
}

// active button mixin
@mixin buttonActive() {
  &:active {
    &:not(:disabled) {
      @content;
    }
  }
}

// button ripple mixin
@mixin buttonRipple() {
  @include e('ripple') {
    @content;
  }
}

@mixin buttonCircle($size) {
  max-width: $size;
  height: $size;
  border-radius: calc($size / 2);
  padding: 0;
}

// button size
$size: large medium small;
$sizeMap: (
  normal: (
    padding: 12px 20px,
    size: 48px,
  ),
  large: (
    padding: 18px 32px,
    size: 56px,
  ),
  medium: (
    padding: 10px 16px,
    size: 40px,
  ),
  small: (
    padding: 6px 12px,
    size: 32px,
  ),
);
@function getSizePadding($size: normal) {
  @return map.get($sizeMap, $size, 'padding');
}
@function getSize($size: normal) {
  @return map.get($sizeMap, $size, 'size');
}

// button theme mixin
@mixin themeMixin($color) {
  background-color: $color;
  color: getFillColor();
  @include buttonHover() {
    background-color: rgba($color: $color, $alpha: 0.7);
  }
  @include buttonActive() {
    transform: scale(0.9);
  }
  @include buttonRipple() {
    background-color: rgba($color: $color, $alpha: 0.9);
  }

  &#{m(plain)} {
    font-weight: 700;
    color: $color;
    background-color: getFillColor();
    border-color: $color;
    @include buttonHover() {
      background-color: getFillColor('light');
      border-color: transparent;
    }
    @include buttonActive() {
      color: getFillColor();
      background-color: transparent;
    }
  }
}

@include b() {
  min-width: getSize('size');
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border: none;
  outline: none;
  padding: getSizePadding();
  cursor: pointer;
  user-select: none;
  vertical-align: middle;
  border-radius: getBorderRadius('small');
  font-size: getFontSize();
  font-weight: normal;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  transition: all getTransition();
  margin: 0 12px 8px 0;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  @include themeMixin(getTextColor());
  &#{m('circle')} {
    @include buttonCircle(getSize());
  }
}

// button type
$buttonType: primary success warning danger;
@each $type in $buttonType {
  @include m($type) {
    @include themeMixin(getColor($type));
  }
}

// button size
@each $s in $size {
  @include m($s) {
    padding: getSizePadding($s);
    &#{m('circle')} {
      @include buttonCircle(getSize($s));
    }
  }
}

// custom color
@include is(color) {
  $color: var(--color);
  background-color: $color;
  color: getFillColor();
  @include buttonHover() {
    background-color: $color;
    opacity: 0.7;
  }
  @include buttonRipple() {
    background-color: rgba(#000, 0.1);
  }
}

// disabled
@include is(disabled) {
  cursor: not-allowed;
  opacity: getOpacity('disabled');
}

// shape: round
@include m(round) {
  border-radius: getBorderRadius(larger);
}

// block
@include is(block) {
  width: 100%;
}

// ripple
@include buttonRipple() {
  position: absolute;
  border-radius: 50%;
  transform: scale(0);
  z-index: -1;
}
@include is('active', e('ripple')) {
  animation: ripple 0.6s linear forwards;
}
@keyframes ripple {
  to {
    transform: scale(4);
  }
}
