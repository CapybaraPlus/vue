@use '../utils/bem.scss' as * with (
  $block: button
);
@use '../common/var' as *;
@use 'sass:map';

// hover button mixin
@mixin buttonHover() {
  &:hover {
    &:not(:disabled) {
      @content;
    }
  }
}

// active button mixin
@mixin buttonActive() {
  &:active {
    &:not(:disabled) {
      @content;
    }
  }
}

// button size
$size: large medium small;
$sizeMap: (
  normal: 12px 20px,
  large: 18px 32px,
  medium: 10px 16px,
  small: 6px 12px,
);
@function getSize($size: normal) {
  @return map.get($sizeMap, $size);
}

@include b() {
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border: none;
  outline: none;
  padding: getSize();
  cursor: pointer;
  user-select: none;
  vertical-align: middle;
  border-radius: getBorderRadius('small');
  font-size: getFontSize();
  font-weight: normal;
  border: 1px solid getBorderColor('dark');
  background-color: getFillColor();
  color: getTextColor();
  transition: all getTransition();
  margin: 0 12px 8px 0;
  box-sizing: border-box;
  text-align: center;
  white-space: nowrap;
  border-color: transparent;
  box-shadow: getBoxShadow('base');
  &::before {
    content: '';
    position: absolute;
    width: 0;
    height: 100%;
    background-color: getBorderColor('base');
    color: inherit;
    box-sizing: border-box;
    border-radius: 200px;
    pointer-events: none;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.6, 1);
    opacity: 0;
    z-index: -1;
  }
  @include buttonHover() {
    border-color: getBorderColor('base');
  }
  @include buttonActive {
    color: getFillColor();
    background-color: transparent;
    &::before {
      width: 100%;
      border-radius: inherit;
      opacity: 0.9;
    }
  }
}

@mixin defaultColorMixin($color) {
  color: $color;
  &::before {
    background-color: $color;
  }
  @include buttonHover() {
    border-color: $color;
  }
}

// button type mixin
$buttonType: primary success warning danger;
@each $type in $buttonType {
  @include m($type) {
    @include defaultColorMixin(getColor($type));
  }
}

// button size
@each $s in $size {
  @include m($s) {
    padding: getSize($s);
  }
}

// custom color
@include is(color) {
  @include defaultColorMixin(var(--color));
}

// disabled
@include is(disabled) {
  cursor: not-allowed;
  opacity: getOpacity('disabled');
}

// shape
@include m(round) {
  border-radius: getBorderRadius(larger);
}

// block
@include is(block) {
  width: 100%;
}
